#ifndef HAX_HEROES_MOVEMENT_INTERNAL_EVENT
#define HAX_HEROES_MOVEMENT_INTERNAL_EVENT

// The following need to be defined:
/*
 * ACTION_MOVETARGET (free action index)
 * ACTION_MOVEACTIVE (free action index)
 * ACTION_SWAP       (free action index)
 * ACTION_SHOVE      (free action index)
 
 * prPivotCommand_Availability      (routine offset)
 * prRepositionCommand_Availability (routine offset)
 * prSwapCommand_Availability       (routine offset)
 * prShoveCommand_Availability      (routine offset)
 
 * prPivot_TargetLegality      (routine offset)
 * prReposition_TargetLegality (routine offset)
 * prSwap_TargetLegality       (routine offset)
 * prShove_TargetLegality      (routine offset)
 
 * TEXT_BOTTOMHELP_PIVOT      (text id)
 * TEXT_BOTTOMHELP_REPOSITION (text id)
 * TEXT_BOTTOMHELP_SWAP       (text id)
 * TEXT_BOTTOMHELP_SHOVE      (text id)
 */

/// ==================================================================================================
/// WARNING: WIZARD-ONLY ZONE, PLEASE DO NOT MESS WITH THIS FILE IF YOU DO NOT KNOW WHAT YOU ARE DOING
/// ==================================================================================================

#include "../_StanHaxCommon/StanCommonASM.event"
#include "../UnitActionRework/UnitActionRework.event"

#include "_6CDefinitions.event"

// PUBLIC ASM
// ----------

ALIGN 4
prPivotCommand_Usability:
	#incbin "asm/TargetCommandUsability.bin"
	POIN (_prPivot_MakeTargetList+1)
	POIN (prPivotCommand_Availability+1) // Availability

ALIGN 4
prPivotCommand_Effect:
	#incbin "asm/TargetCommandEffect.bin"
	POIN (_prPivot_MakeTargetList+1)
	POIN _pPivotSelectorDefinition

ALIGN 4
prRepositionCommand_Usability:
	#incbin "asm/TargetCommandUsability.bin"
	POIN (_prReposition_MakeTargetList+1)
	POIN (prRepositionCommand_Availability+1)

ALIGN 4
prRepositionCommand_Effect:
	#incbin "asm/TargetCommandEffect.bin"
	POIN (_prReposition_MakeTargetList+1)
	POIN _pRepositionSelectorDefinition

ALIGN 4
prSwapCommand_Usability:
	#incbin "asm/TargetCommandUsability.bin"
	POIN (_prSwap_MakeTargetList+1)
	POIN (prSwapCommand_Availability+1)

ALIGN 4
prSwapCommand_Effect:
	#incbin "asm/TargetCommandEffect.bin"
	POIN (_prSwap_MakeTargetList+1)
	POIN _pSwapSelectorDefinition

// PIVOT STUFF
// -----------

ALIGN 4
_prPivotSelection_OnConstruction:
	#incbin "asm/TargetSelection_OnConstruction.bin"
	WORD TEXT_BOTTOMHELP_PIVOT

ALIGN 4
_prPivotSelection_OnSelection:
	#incbin "asm/PivotSelection_OnSelection.bin"
	POIN (_prGetOppositePosition+1)
	WORD ACTION_MOVEACTIVE

ALIGN 4
_prPivotSelection_OnChange:
	#incbin "asm/ActiveMoverSelection_OnChange.bin"
	POIN (_prGetOppositePosition+1)

ALIGN 4
_prPivot_MakeTargetList:
	#incbin "asm/MakeAdjacentTargetList.bin"
	POIN (prClearRangeMap+1)
	POIN (_prPivot_TargetCheck+1)

ALIGN 4
_prPivot_TargetCheck:
	#incbin "asm/Pivot_TargetCheck.bin"
	POIN (_prGetOppositePosition+1)
	POIN (prUnit_CanBeOnPosition+1)
	POIN (prPivot_TargetLegality+1)

ALIGN 4
_pPivotSelectorDefinition:
	POIN (_prPivotSelection_OnConstruction+1) // Constructor
	POIN (_prSelection_DestructMoveDisplay+1) // Destructor
	WORD 0 // idk (actually ik kinda, see my notes)
	POIN (_prPivotSelection_OnChange+1) // target change
	WORD 0 // idk (same)
	POIN (_prPivotSelection_OnSelection+1) // A Press
	POIN 0x22749 // B Press (Generic Vanilla One that calls the unit menu back)
	WORD 0 // idk (same)

// REPOSITION STUFF
// ----------------

ALIGN 4
_prRepositionSelection_OnConstruction:
	#incbin "asm/TargetSelection_OnConstruction.bin"
	WORD TEXT_BOTTOMHELP_REPOSITION

ALIGN 4
_prRepositionSelection_OnSelection:
	#incbin "asm/RepositionSelection_OnSelection.bin"
	POIN (_prGetOppositePosition+1)
	WORD ACTION_MOVETARGET

ALIGN 4
_prRepositionSelection_OnChange:
	#incbin "asm/TargetMoverSelection_OnChange.bin"
	POIN (_prGetOppositePosition+1)

ALIGN 4
_prReposition_MakeTargetList:
	#incbin "asm/MakeAdjacentTargetList.bin"
	POIN (prClearRangeMap+1)
	POIN (_prReposition_TargetCheck+1)

ALIGN 4
_prReposition_TargetCheck:
	#incbin "asm/Reposition_TargetCheck.bin"
	POIN (_prGetOppositePosition+1)
	POIN (prUnit_CanBeOnPosition+1)
	POIN (prReposition_TargetLegality+1)

ALIGN 4
_pRepositionSelectorDefinition:
	POIN (_prRepositionSelection_OnConstruction+1) // Constructor
	POIN (_prSelection_DestructMoveDisplay+1) // Destructor
	WORD 0 // idk (actually ik kinda, see my notes)
	POIN (_prRepositionSelection_OnChange+1) // target change
	WORD 0 // idk (same)
	POIN (_prRepositionSelection_OnSelection+1) // A Press
	POIN 0x22749 // B Press (Generic Vanilla One that calls the unit menu back)
	WORD 0 // idk (same)

// SWAP STUFF
// ----------

ALIGN 4
_prSwapSelection_OnConstruction:
	#incbin "asm/TargetSelection_OnConstruction.bin"
	WORD TEXT_BOTTOMHELP_SWAP

ALIGN 4
_prSwapSelection_OnChange:
	#incbin "asm/SwapSelection_OnChange.bin"

ALIGN 4
_prSwapSelection_OnSelection:
	#incbin "asm/SwapSelection_OnSelection.bin"
	WORD ACTION_SWAP

ALIGN 4
_prSwap_MakeTargetList:
	#incbin "asm/MakeAdjacentTargetList.bin"
	POIN (prClearRangeMap+1)
	POIN (_prSwap_TargetCheck+1)

ALIGN 4
_prSwap_TargetCheck:
	#incbin "asm/Swap_TargetCheck.bin"
	POIN (prUnit_CanStandOnPosition+1)
	POIN (prSwap_TargetLegality+1)

ALIGN 4
_pSwapSelectorDefinition:
	POIN (_prSwapSelection_OnConstruction+1) // Constructor
	WORD 0 // Destructor
	WORD 0 // idk (actually ik kinda, see my notes)
	POIN (_prSwapSelection_OnChange+1) // target change
	WORD 0 // idk (same)
	POIN (_prSwapSelection_OnSelection+1) // A Press
	POIN 0x22749 // B Press (Generic Vanilla One that calls the unit menu back)
	WORD 0 // idk (same)

// COMMON STUFF
// ------------

ALIGN 4
_prGetOppositePosition:
	#incbin "asm/GetOppositePosition.bin"

ALIGN 4
_prSelection_DestructMoveDisplay:
	#incbin "asm/KillRangeDisplay.bin"

ALIGN 4
_prMoveActiveUnitAction:
	#incbin "asm/MoveActiveUnitAction.bin"
	POIN (_p6CUnitMoveAnim_rConstruct+1)

ALIGN 4
_prMoveTargetUnitAction:
	#incbin "asm/MoveTargetUnitAction.bin"
	POIN (_p6CUnitMoveAnim_rConstruct+1)

ALIGN 4
_prSwapAction:
	#incbin "asm/SwapAction.bin"
	POIN (_p6CUnitMoveAnim_rConstruct+1)

ALIGN 4
_p6CUnitMoveAnim_rConstruct:
	#incbin "asm/6CUnitMoveAnim/Constructor.bin"
	POIN _p6CSingleUnitMovementAnim

ALIGN 4
_p6CUnitMoveAnim_rDestruct:
	#incbin "asm/6CUnitMoveAnim/Destructor.bin"

ALIGN 4
_p6CUnitMoveAnim_rLoop:
	#incbin "asm/6CUnitMoveAnim/Loopor.bin"
	POIN (prMOVEUNIT_MoveTowards+1)
	WORD 5 // Speed

_p6CSingleUnitMovementAnim:
{

#ifndef NDEBUG
	_6C_SET_NAME(__psName)
#endif

	_6C_SET_DESTRUCTOR(_p6CUnitMoveAnim_rDestruct+1)
	_6C_CALL_ROUTINE(0x15361) // Block 6C Thread 2
	
	// Start Animation on Next frame only (ensuring the 6C is properly constructed)
	_6C_YIELD
	
	// Actual animation
	_6C_LOOP_ROUTINE(_p6CUnitMoveAnim_rLoop+1)
	
	_6C_CALL_ROUTINE(0x15371) // Unblock 6C Thread 2
	_6C_END
	
#ifndef NDEBUG
__psName:
	String(SingleUnitMoveAnim)
	BYTE 0
#endif

}

SetUnitAction(ACTION_MOVETARGET, ActionRoutine(_prMoveTargetUnitAction+1))
SetUnitAction(ACTION_MOVEACTIVE, ActionRoutine(_prMoveActiveUnitAction+1))
SetUnitAction(ACTION_SWAP,       ActionRoutine(_prSwapAction+1))

ALIGN 4 // For good measure

#endif // HAX_HEROES_MOVEMENT_INTERNAL_EVENT
