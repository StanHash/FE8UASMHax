#ifndef HAX_HEROES_MOVEMENTS_EVENT
#define HAX_HEROES_MOVEMENTS_EVENT

#ifndef _FE8_
	ERROR HEROES MOVEMENT is for FE8
#endif // _FE8_

#include "Tools/Tool Helpers.txt"

#ifndef FreeSpace
	#define FreeSpace 0xB2A610 // Size: 0xD59F0
	ORG FreeSpace
	
	#include "../_FE8EssentialFixes.event"
#endif

#define ACTION_MOVETARGET 0x23
#define ACTION_MOVEACTIVE 0x24
#define ACTION_SWAP       0x25
#define ACTION_PUSH       0x26

#define TEXT_BOTTOMHELP_PIVOT      0x44 // Replaces Unused "Lyn"        Text, Change this to a textprocess generated definition
#define TEXT_BOTTOMHELP_REPOSITION 0x45 // Replaces Unused "Roy"        Text, Change this to a textprocess generated definition
#define TEXT_BOTTOMHELP_SWAP       0x4C // Replaces Unused "Ruthea off" Text, Change this to a textprocess generated definition
#define TEXT_BOTTOMHELP_SHOVE      0x4E // Replaces err idc
#define TEXT_BOTTOMHELP_SMITE      0x4F // Replaces

// "Availability" routines are what dictates if a given unit has access to the command
// Skill checks would go here
ALIGN 4
prPivotCommand_Availability:
prRepositionCommand_Availability:
prSwapCommand_Availability:
prShoveCommand_Availability:
prSmiteCommand_Availability:
	SHORT 0x2001 0x4770 // Commands are always available by default

// "Legality" routines are what dictates if a given unit can be targetted by a command
// Constitution/Allegience checks would go here
ALIGN 4
prPivot_TargetLegality:
prReposition_TargetLegality:
prSwap_TargetLegality:
prShove_TargetLegality:
prSmite_TargetLegality:
	SHORT 0x2001 0x4770 // Targets are always legal by default

#include "HeroesMovement_Internal.event"

// ====================================================================================================================================================
// The rest of the file sets up the unit menu table for demonstration purposes. Feel free to change everything to accomodate your own buildfile project
// ====================================================================================================================================================

#include "../_UnitMenuDefinitions.event"

#define textPivotCommandName 0x62 // Replaces Unused "bear"   Text, Change this to a textprocess generated definition
#define textPivotCommandDesc 0x63 // Replaces Unused "normal" Text, Change this to a textprocess generated definition

#define textRepositionCommandName 0x64 // Replaces Unused "strong"    Text, Change this to a textprocess generated definition
#define textRepositionCommandDesc 0x65 // Replaces Unused "very bear" Text, Change this to a textprocess generated definition

#define textSwapCommandName 0x66 // Replaces Unused "vert strong" Text, Change this to a textprocess generated definition
#define textSwapCommandDesc 0x4D // Replaces Unused "Leyvan off"  Text, Change this to a textprocess generated definition

#define textShoveCommandName 0x67 // Replaces Unused "bear"   Text, Change this to a textprocess generated definition
#define textShoveCommandDesc 0x68 // Replaces Unused "normal" Text, Change this to a textprocess generated definition

#define textSmiteCommandName 0x69 // Replaces Unused "bear"   Text, Change this to a textprocess generated definition
#define textSmiteCommandDesc 0x6A // Replaces Unused "normal" Text, Change this to a textprocess generated definition

// Here is where I insert the text, you probably want to do that with textprocess yourself

setText(textPivotCommandName, psPivotCommandName)
psPivotCommandName:
	BYTE 0x20 // space for align
	String(Pivot)
	BYTE 0

setText(textPivotCommandDesc, psPivotCommandDesc)
psPivotCommandDesc:
	String(Move to opposite side of adjacent ally.)
	BYTE 0

setText(textRepositionCommandName, psRepositionCommandName)
psRepositionCommandName:
	BYTE 0x20 // space for align
	String(Reposition)
	BYTE 0

setText(textRepositionCommandDesc, psRepositionCommandDesc)
psRepositionCommandDesc:
	String(Move to opposite side of adjacent ally.)
	BYTE 0

setText(textSwapCommandName, psSwapCommandName)
psSwapCommandName:
	BYTE 0x20 // space for align
	String(Swap)
	BYTE 0

setText(textSwapCommandDesc, psSwapCommandDesc)
psSwapCommandDesc:
	String(Swap positions with adjacent ally.)
	BYTE 0

setText(textShoveCommandName, psShoveCommandName)
psShoveCommandName:
	BYTE 0x20 // space for align
	String(Shove)
	BYTE 0

setText(textShoveCommandDesc, psShoveCommandDesc)
psShoveCommandDesc:
	String(Push adjacent unit one tile away.)
	BYTE 0

setText(textSmiteCommandName, psSmiteCommandName)
psSmiteCommandName:
	BYTE 0x20 // space for align
	String(Smite)
	BYTE 0

setText(textSmiteCommandDesc, psSmiteCommandDesc)
psSmiteCommandDesc:
	String(Push adjacent unit two tiles away.)
	BYTE 0

setText(TEXT_BOTTOMHELP_PIVOT, psPivotBottomHelpText)
psPivotBottomHelpText:
	String(Select an ally to move over.)
	BYTE 0

setText(TEXT_BOTTOMHELP_REPOSITION, psRepositionBottomHelpText)
psRepositionBottomHelpText:
	String(Select an ally to pull back.)
	BYTE 0

setText(TEXT_BOTTOMHELP_SWAP, psSwapBottomHelpText)
psSwapBottomHelpText:
	String(Select an ally to swap positions with.)
	BYTE 0

setText(TEXT_BOTTOMHELP_SHOVE, psShoveBottomHelpText)
psShoveBottomHelpText:
	String(Select an unit to push a tile away.)
	BYTE 0

setText(TEXT_BOTTOMHELP_SMITE, psSmiteBottomHelpText)
psSmiteBottomHelpText:
	String(Select an unit to push two tiles away.)
	BYTE 0

PUSH; ORG 0x59D1F8 // Repoint Unit Menu Commands
	POIN pUnitMenuCommands
POP

ALIGN 4
pUnitMenuCommands:
	UM_Seize
	UM_Attack
	UM_Attack_B
	UM_Staff
	UM_Ride
	UM_Exit
	UM_Play
	UM_Dance
	UM_Steal
	UM_Summon
	UM_Summon_DK
	UM_Pick
	UM_Talk
	UM_Support
	UM_Visit
	UM_Chest
	UM_Door
	UM_Armory
	UM_Vendor
	UM_Secret
	UM_Arena
	UM_Rescue
	UM_Give
	UM_Take
	UM_Drop
	MenuCommand(textShoveCommandName,      textShoveCommandDesc,      NormalText, prShoveCommand_Usability,      prShoveCommand_Effect)
	MenuCommand(textSmiteCommandName,      textSmiteCommandDesc,      NormalText, prSmiteCommand_Usability,      prSmiteCommand_Effect)
	MenuCommand(textPivotCommandName,      textPivotCommandDesc,      NormalText, prPivotCommand_Usability,      prPivotCommand_Effect)
	MenuCommand(textRepositionCommandName, textRepositionCommandDesc, NormalText, prRepositionCommand_Usability, prRepositionCommand_Effect)
	MenuCommand(textSwapCommandName,       textSwapCommandDesc,       NormalText, prSwapCommand_Usability,       prSwapCommand_Effect)
	UM_Item
	UM_Trade
	UM_Supply
	UM_Wait
UM_Separator

#endif // HAX_HEROES_MOVEMENTS_EVENT
