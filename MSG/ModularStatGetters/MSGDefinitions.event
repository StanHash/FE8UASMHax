#ifndef MSG_DEFINITIONS_EVENT
#define MSG_DEFINITIONS_EVENT

#ifndef _FE8_
	ERROR Modular Stat Getters is for FE8
#endif // _FE8_

// Vanilla Routines Pointers
#define prGetItemHPBonus  0x080163F0
#define prGetItemPowBonus 0x08016420
#define prGetItemSklBonus 0x08016450
#define prGetItemSpdBonus 0x08016480
#define prGetItemDefBonus 0x080164B0
#define prGetItemResBonus 0x080164E0
#define prGetItemLckBonus 0x08016510

// defines pointer as ARM pointer (only useful for MSG, since it reverses last bit to default to thumb)
// #define prARM(aPtr) "(aPtr|1)"

// Routine templates

#define rCall(arpToCall, aArg) "SHORT 0xB500 0x4A03 0x4B01 0x469E 0xF800 0xBD00; POIN arpToCall; WORD aArg"
#define rCall(arpToCall)       "SHORT 0xB510 0x4C02 0x46A6 0xF800 0xBD10 0x46C0; POIN arpToCall"

// Conditionals
#define rIf(arpCheck, aArg) "SHORT 0xB530 0x4A07 0xB407 0x4B05 0x469E 0xF800 0x1C03 0xBC07 0x2B00 0xD001 0xF000 0xF806 0xBD30 0x46C0; POIN arpCheck; WORD aArg"
#define rIf(arpCheck)       "SHORT 0xB530 0xB407 0x4B04 0x469E 0xF800 0x1C03 0xBC07 0x2B00 0xD001 0xF000 0xF803 0xBD30; POIN arpCheck"

// Arithmetics
#define rAdd "SHORT 0xB510 0x1C04 0xF000 0xF804 0x1900 0xBC10 0xBC02 0x4708"
#define rSub "SHORT 0xB510 0x1C04 0xF000 0xF806 0x1A24 0x1C20 0xBC10 0xBC02 0x4708 0x46C0"

#define rShiftedRight(aAmount) "SHORT (0x1000 | ((aAmount)<<6)) 0x4770" // TODO: replace "(0x1000 | ((aAmount)<<6))" with THUMB_ASR r0 r0 aAmount
#define rShiftedLeft(aAmount)  "SHORT (0x0000 | ((aAmount)<<6)) 0x4770" // TODO: replace "(0x0000 | ((aAmount)<<6))" with THUMB_LSL r0 r0 aAmount

#define rNegated "SHORT 0x4240 0x4770"

// Constant
#define rConst(aValue) "SHORT (0x2000 | (aValue)) 0x4770"
#define rSwitchConst(aValueIfTrue, aValueIfFalse) "SHORT 0xB500 0xF000 0xF807 0x0080 0x3802 0x4487 (0x2000 | (aValueIfFalse)) 0xE000 (0x2000 | (aValueIfTrue)) 0xBD00"

// Simple Getters
#define rGetCharSByte(aByteOffset) "SHORT (0x2000 | (aByteOffset)) 0x5608 0x4770 0x46C0"
#define rGetCharUByte(aByteOffset) "SHORT (0x2000 | (aByteOffset)) 0x5C08 0x4770 0x46C0"
#define rGetCharWord(aWordOffset)  "SHORT (0x2000 | (aWordOffset)) 0x5808 0x4770 0x46C0"

#define rGetCharUpperHalfByte(aOffset) "SHORT (0x2000 | (aOffset)) 0x5C08 0x0900 0x210F 0x4008 0x4770"
#define rGetCharLowerHalfByte(aOffset) "SHORT (0x2000 | (aOffset)) 0x5C08 0x210F 0x4008 0x4770 0x46C0"

// Calling Getters
#define rGetSByteFrom(aByteOffset) "SHORT 0xB500 0xF000 0xF803 (0x2100 | (aByteOffset)) 0x5640 0xBD00"
#define rGetUByteFrom(aByteOffset) "SHORT 0xB500 0xF000 0xF803 (0x2100 | (aByteOffset)) 0x5C40 0xBD00"
#define rGetWordFrom(aWordOffset)  "SHORT 0xB500 0xF000 0xF803 (0x2100 | (aWordOffset)) 0x5840 0xBD00"

#define rGetLowerHalfByteFrom(aOffset) "SHORT 0xB500 0xF000 0xF805 (0x2100 | (aOffset)) 0x5C40 0x210F 0x4008 0xBD00"
#define rGetUpperHalfByteFrom(aOffset) "SHORT 0xB500 0xF000 0xF807 (0x2100 | (aOffset)) 0x5C40 0x0900 0x210F 0x4008 0xBD00 0x46C0"

// Helpers
#define rGetROMClassSByte(aByteOffset) "rGetSByteFrom(aByteOffset); rGetCharWord(0x04)"
#define rGetROMClassUByte(aByteOffset) "rGetUByteFrom(aByteOffset); rGetCharWord(0x04)"

#define rGetROMCharSByte(aByteOffset) "rGetSByteFrom(aByteOffset); rGetCharWord(0x00)"
#define rGetROMCharUByte(aByteOffset) "rGetUByteFrom(aByteOffset); rGetCharWord(0x00)"

#define rAddCharSByte(aByteOffset) "rAdd; rGetCharSByte(aByteOffset)"
#define rAddCharUByte(aByteOffset) "rAdd; rGetCharUByte(aByteOffset)"

#define rAddConst(aValue) "rAdd; rConst(aValue)"

#define rNOP "SHORT 0x4770 0x46C0" // bx lr; nop

#define rCallForEquip(arpToCall) "SHORT 0xB500 0x1C08 0x4B03 0x469E 0xF800 0xF000 0xF805 0xBC02 0x4708 0x0000 0x6B28 0x0801; rCall(arpToCall)"
#define rCallForUnit(arpToCall) "SHORT 0xB500 0x1C08 0xF000 0xF802 0xBC02 0x4708; rCall(arpToCall)"

#define rCallSequence(arplSequence) "SHORT 0xB570 0x1C0C 0x1C15 0x467E 0x361A 0xCE08 0x2B00 0xD006 0x2101 0x430B 0x1C21 0x1C2A 0x469E 0xF800 0xE7F5 0xBC70 0xBC02 0x4708; POIN arplSequence 0"

#define rHalved rShiftedRight(1)
#define rNullified rConst(0)

// Checks
#define rNot "SHORT 0xB500 0xF000 0xF803 0x2101 0x4048 0xBD00"

// Shifts r1 to r0, r2 to r1, r3 to r2 and then bl to routine inserted directly after
// #define rShiftArgs "SHORT 0xB500 0x1C08 0x1C11 0x1C1A 0xF000 0xF802 0xBC02 0x4708"

#endif // MSG_DEFINITIONS_EVENT
